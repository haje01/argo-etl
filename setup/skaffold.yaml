apiVersion: skaffold/v4beta3
kind: Config
metadata:
  name: infra
profiles:
  # 로컬 (Minikube) 인프라 설치
- name: local
  manifests:
    rawYaml:
    - k8s/*.yaml
    - local/*.yaml
  deploy:
    helm: 
      # 포트포워딩이 필요한 설치부터 
      releases:
      - name: minio 
        repo: https://charts.bitnami.com/bitnami
        remoteChart: minio 
        setValues:
          auth.rootPassword: adminpass
        wait: true  # 포트포워딩 실패 방지 
      - name: aev 
        repo: https://argoproj.github.io/argo-helm
        remoteChart: argo-events
      - name: awf
        repo: https://charts.bitnami.com/bitnami
        remoteChart: argo-workflows
        setValues:
          auth.enabled: false 
          postgresql.enabled: false
        wait: true  # 포트포워딩 실패 방지 
    # kubectl 로 매니페스트 설치 
    kubectl:
      hooks:
        after:
        # MinIO 에 etlproj 버킷 생성 
        - host:
            command: ['sh', '-c', "POD=$(kubectl get pods -l 'app.kubernetes.io/instance=minio' -o=jsonpath='{.items[0].metadata.name}') && kubectl exec $POD -- mc alias set my http://localhost:9000 admin adminpass && kubectl exec $POD -- mc mb -p my/artifact"]
  # --port-forward 가 잘 동작하지 않아 명시 
  portForward:  
    - resourceType: service 
      resourceName: minio 
      port: 9001
    - resourceType: service
      resourceName: awf-argo-workflows-server
      port: 80
      localPort: 8046
  # AWS EKS 인프라 설치
- name: eks
  build:
    artifacts:
    - image: eks-init
      context: eks
      # 이미지 저장소에 push 가능하도록 login 
      hooks:
        before:
        - command: ['sh', '-c', ' aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-2.amazonaws.com']
  manifests:
    rawYaml:
    - k8s/*.yaml
  deploy:
    kubectl: {}
    helm: 
      # 포트포워딩이 필요한 설치부터 
      releases:
      - name: aev 
        repo: https://argoproj.github.io/argo-helm
        remoteChart: argo-events
      - name: awf
        repo: https://charts.bitnami.com/bitnami
        remoteChart: argo-workflows
        setValues:
          postgresql.enabled: false
          ingress.enabled: true
          ingress.hostname: '"*.ap-northeast-2.elb.amazonaws.com"'
          ingress.path: /*
          ingress.annotations:
          ingress.annotations.kubernetes.io/ingress.class: alb
          ingress.annotations.alb.ingress.kubernetes.io/group.name: public
          ingress.annotations.alb.ingress.kubernetes.io/scheme: internet-facing
          ingress.annotations.alb.ingress.kubernetes.io/target-type: ip
          ingress.annotations.alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'          
      - name: eks-init
        chartPath: aws/eks-init
        setValueTemplates:
          awsAccessKey: "{{ .AWS_ACCESS_KEY_ID }}"
          awsSecretKey: "{{ .AWS_SECRET_ACCESS_KEY }}"


